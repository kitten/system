{ lib, pkgs, config, user, ... }:

with lib;
let
  inherit (generators) toLua;
  cfg = config.modules.desktop;
in {
  options.modules.desktop.audio = {
    enable = mkOption {
      default = true;
      example = true;
      description = "Whether to enable Pipewire audio.";
      type = types.bool;
    };

    lowLatency = mkOption {
      default = true;
      example = true;
      description = "Whether to enable Pipewire low latency.";
      type = types.bool;
    };

    quantum = mkOption {
      description = "Minimum quantum to set";
      type = types.int;
      default = 64;
      example = 32;
    };

    rate = mkOption {
      description = "Rate to set";
      type = types.int;
      default = 48000;
      example = 96000;
    };
  };

  config = mkIf cfg.audio.enable {
    security.rtkit.enable = true;

    services = {
      pipewire = let
        quantum = cfg.audio.quantum;
        rate = cfg.audio.rate;
        qr = "${toString quantum}/${toString rate}";
      in {
        enable = cfg.audio.enable;
        pulse.enable = true;
        jack.enable = true;
        alsa = {
          enable = true;
          support32Bit = mkDefault true;
        };

        # write extra config
        extraConfig.pipewire = mkIf cfg.audio.lowLatency {
          "99-lowlatency" = {
            context = {
              properties.default.clock.min-quantum = quantum;
              modules = [
                {
                  name = "libpipewire-module-rtkit";
                  flags = ["ifexists" "nofail"];
                  args = {
                    nice.level = -15;
                    rt = {
                      prio = 88;
                      time.soft = 200000;
                      time.hard = 200000;
                    };
                  };
                }
                {
                  name = "libpipewire-module-protocol-pulse";
                  args = {
                    server.address = ["unix:native"];
                    pulse.min = {
                      req = qr;
                      quantum = qr;
                      frag = qr;
                    };
                  };
                }
              ];

              stream.properties = {
                node.latency = qr;
                resample.quality = 1;
              };
            };
          };
        };

        wireplumber = {
          enable = true;
          configPackages = let
            # generate "matches" section of the rules
            matches = toLua {
              multiline = false; # looks better while inline
              indent = false;
            } [[["node.name" "matches" "alsa_output.*"]]]; # nested lists are to produce `{{{ }}}` in the output

            # generate "apply_properties" section of the rules
            apply_properties = toLua {} {
              "audio.format" = "S32LE";
              "audio.rate" = rate * 2;
              "api.alsa.period-size" = 2;
            };
          in [
            (pkgs.writeTextDir "share/lowlatency.lua.d/99-alsa-lowlatency.lua" ''
              -- Generated by nix-gaming
              alsa_monitor.rules = {
                {
                  matches = ${matches};
                  apply_properties = ${apply_properties};
                }
              }
            '')
          ];
        };
      };
    };
  };
}
