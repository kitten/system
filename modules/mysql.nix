{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.services.mysql;

  isMariaDB = lib.getName cfg.package == lib.getName pkgs.mariadb;

  mysqldOptions =
    "--defaults-file=${configFile} --datadir=${cfg.dataDir} --basedir=${cfg.package}";

  format = pkgs.formats.ini { listsAsDuplicateKeys = true; };
  configFile = format.generate "my.cnf" cfg.settings;

  preStart = if isMariaDB then ''
    if ! test -e ${cfg.dataDir}/mysql_init; then
      ${cfg.package}/bin/mysql_install_db ${mysqldOptions}
      touch ${cfg.dataDir}/mysql_init
    fi
  '' else ''
    if ! test -e ${cfg.dataDir}/mysql_init; then
      ${cfg.package}/bin/mysqld ${mysqldOptions} --initialize-insecure
      touch ${cfg.dataDir}/mysql_init
    fi
  '';
in

{
  options = {

    services.mysql = {

      enable = mkEnableOption (lib.mdDoc "MySQL server");

      package = mkOption {
        type = types.package;
        example = literalExpression "pkgs.mariadb";
        description = lib.mdDoc ''
          Which MySQL derivation to use. MariaDB packages are supported too.
        '';
      };

      dataDir = mkOption {
        type = types.path;
        example = "/var/lib/mysql";
        description = lib.mdDoc ''
          The data directory for MySQL.

          ::: {.note}
          If left as the default value of `/var/lib/mysql` this directory will automatically be created before the MySQL
          server starts, otherwise you are responsible for ensuring the directory exists with appropriate ownership and permissions.
          :::
        '';
      };

      configFile = mkOption {
        type = types.path;
        default = configFile;
        defaultText = ''
          A configuration file automatically generated by NixOS.
        '';
        description = lib.mdDoc ''
          Override the configuration file used by MySQL. By default,
          NixOS generates one automatically from {option}`services.mysql.settings`.
        '';
        example = literalExpression ''
          pkgs.writeText "my.cnf" '''
            [mysqld]
            datadir = /var/lib/mysql
            bind-address = 127.0.0.1
            port = 3336

            !includedir /etc/mysql/conf.d/
          ''';
        '';
      };

      settings = mkOption {
        type = format.type;
        default = {};
        description = lib.mdDoc ''
          MySQL configuration. Refer to
          <https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html>,
          <https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html>,
          and <https://mariadb.com/kb/en/server-system-variables/>
          for details on supported values.

          ::: {.note}
          MySQL configuration options such as `--quick` should be treated as
          boolean options and provided values such as `true`, `false`,
          `1`, or `0`. See the provided example below.
          :::
        '';
        example = literalExpression ''
          {
            mysqld = {
              key_buffer_size = "6G";
              table_cache = 1600;
              log-error = "/var/log/mysql_err.log";
              plugin-load-add = [ "server_audit" "ed25519=auth_ed25519" ];
            };
            mysqldump = {
              quick = true;
              max_allowed_packet = "16M";
            };
          }
        '';
      };
    };
  };


  ###### implementation

  config = mkIf cfg.enable {

    services.mysql.dataDir =
      mkDefault (if versionAtLeast config.system.stateVersion "17.09" then "/var/lib/mysql"
                 else "/var/mysql");

    services.mysql.settings.mysqld = mkMerge [
      {
        datadir = cfg.dataDir;
        port = mkDefault 3306;
      }
      (mkIf (!isMariaDB) {
        plugin-load-add = "auth_socket.so";
      })
    ];

    environment.systemPackages = [ cfg.package ];
    environment.etc."my.cnf".source = cfg.configFile;

    launchd.user.agents.mysql = {
      path = [ cfg.package ];

      script = ''
        ${preStart}
        exec ${cfg.package}/bin/mysqld ${mysqldOptions}
      '';

      serviceConfig.KeepAlive = true;
      serviceConfig.RunAtLoad = true;
    };

    system.activationScripts.postActivation.text = ''
      if [ ! -d "${cfg.dataDir}" ]; then
        mkdir -p "${cfg.dataDir}"
        chmod -R 777 "${cfg.dataDir}"
      fi

      if [ ! -d "/run/mysqld" ]; then
        mkdir -p "/run/mysqld"
        chmod -R 777 "/run/mysqld"
      fi
    '';
  };
}

